from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.decomposition import NMF
import numpy as np

# Sample documents
documents = [
    "I love playing football and watching matches.",
    "The economy is growing steadily in recent months.",
    "Football players are training for the world cup.",
    "The stock market crashed after weak GDP data.",
    "GDP growth is a key indicator of economic health."
]

# Step 1: TF-IDF Vectorization
vectorizer = TfidfVectorizer(stop_words='english')
X = vectorizer.fit_transform(documents)

# Step 2: Apply NMF
nmf_model = NMF(n_components=2, random_state=42)
W = nmf_model.fit_transform(X)
H = nmf_model.components_

# Step 3: Evaluate using Reconstruction Error
reconstructed = np.dot(W, H)
reconstruction_error = np.linalg.norm(X.toarray() - reconstructed)
print("Reconstruction Error:", reconstruction_error)

# Optional: Print top words per topic
feature_names = vectorizer.get_feature_names_out()
for topic_idx, topic in enumerate(H):
    print(f"\nTopic #{topic_idx + 1}:")
    top_words_idx = topic.argsort()[:-6:-1]
    top_words = [feature_names[i] for i in top_words_idx]
    print("Top words:", ", ".join(top_words))
